{
  "id": "20251015193022460919",
  "room": "914529",
  "message": "v2",
  "author": "Vinayak",
  "timestamp": "2025-10-15T19:30:22.460919+00:00",
  "content": "<h1>Turing Machines: A Simple Explanation</h1>\n<h2>What is a Turing Machine?</h2>\n<p>A <strong>Turing Machine</strong> is a theoretical computational model introduced by Alan Turing. It consists of:</p>\n<ol>\n<li><strong>Infinite tape</strong> divided into cells (each holding a symbol, e.g., 0 or 1).</li>\n<li><strong>Read/Write head</strong> that moves left/right and reads/writes symbols.</li>\n<li><strong>State register</strong> that tracks the machine's current state.</li>\n<li><strong>Transition rules</strong> defining actions (move, write, change state) based on the current symbol and state.</li>\n</ol>\n<p>Despite its simplicity, it can simulate <em>any</em> algorithm, making it foundational in computer science.</p>\n<hr>\n<h2>Components in Detail</h2>\n<ul>\n<li><strong>Tape</strong>: Infinite in both directions. Think of it as a string of symbols (e.g., <code>1101</code>).</li>\n<li><strong>Head</strong>: Points to the current cell. Can read, write, or move.</li>\n<li><strong>States</strong>: The machine has a finite number of states (e.g., <code>Start</code>, <code>Read1</code>, <code>Flip</code>, <code>Halt</code>).</li>\n<li><strong>Transitions</strong>: Rules like <em>If in State A and read 1 → Write 0, move right, go to State B</em>.</li>\n</ul>\n<hr>\n<h2>Simple Example: Incrementing a Binary Number</h2>\n<p>Let’s design a Turing Machine that <strong>adds 1 to a binary number</strong> on the tape.<br><strong>Input</strong>: <code>101</code> (which is 5 in decimal).<br><strong>Output</strong>: <code>110</code> (6 in decimal).</p>\n<h3>Step-by-Step Process</h3>\n<ol>\n<li><strong>Start</strong>: Head at the leftmost cell (<code>1</code>).</li>\n<li><strong>Move right</strong> until the end of the tape (passing <code>0</code> and <code>1</code>).</li>\n<li><strong>Flip trailing 1s to 0s</strong> (since <code>1 + 1 = 10</code> in binary).</li>\n<li><strong>Flip the first 0 to 1</strong>. If no 0 is found, add a <code>1</code> at the left.</li>\n</ol>\n<h3>State Transitions (Pseudocode)</h3>\n<pre><code class=\"language-markdown hljs\" data-highlighted=\"yes\">States: S (Start), R (Read 1s), F (Flip 0), H (Halt)\nTape: [<span class=\"hljs-string\">1</span>][<span class=\"hljs-symbol\">0</span>][<span class=\"hljs-string\">1</span>][<span class=\"hljs-symbol\"> Blank </span>]\n\n<span class=\"hljs-bullet\">1.</span> In S:\n<span class=\"hljs-bullet\">   -</span> Read 1 → Move right to [0], state R.\n<span class=\"hljs-bullet\">2.</span> In R:\n<span class=\"hljs-bullet\">   -</span> Read 0 → Flip to 1, move left, state F.\n<span class=\"hljs-bullet\">3.</span> In F:\n<span class=\"hljs-bullet\">   -</span> Read 1 → Flip to 0, move right, state R.\n<span class=\"hljs-bullet\">   -</span> If blank cell → Write 1, state H.\n</code></pre>\n<h3>Final Tape State</h3>\n<p>After processing <code>101</code>, the output is <code>110</code>.</p>\n<hr>\n<h2>Why It Matters</h2>\n<p>A Turing Machine demonstrates that even simple rules (state + symbol → action) can perform complex computations. It abstracts real computers, focusing on the essence of algorithmic logic.</p>\n"
}